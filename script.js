// ------------------------
// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AHU
document.getElementById("ahuForm").addEventListener("submit", function(e) {
  e.preventDefault();

  let inputAirflow = parseFloat(document.getElementById("airflow").value);
  const airflowUnit = document.getElementById("airflowUnit").value;
  const staticPressure = parseFloat(document.getElementById("static").value);
  const efficiency = parseFloat(document.getElementById("efficiency").value);
  const ratedPower = parseFloat(document.getElementById("power").value);
  const ratedRPM = parseFloat(document.getElementById("rpm").value);
  const ratedFreq = parseFloat(document.getElementById("freq").value);

  // ‡πÅ‡∏õ‡∏•‡∏á airflow ‡πÄ‡∏õ‡πá‡∏ô m¬≥/h ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠ m¬≥/h)
  let airflowForCalc;
  switch (airflowUnit) {
    case "cfm":
      airflowForCalc = inputAirflow * 1.699;
      break;
    case "ls":
      airflowForCalc = inputAirflow * 3.6;
      break;
    case "m3h":
    default:
      airflowForCalc = inputAirflow;
      break;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì actual power
  const actualPower = (airflowForCalc / 3600) * staticPressure / (efficiency * 1000);
  const powerRatio = actualPower / ratedPower;
  const rpmRatio = Math.cbrt(powerRatio);
  const actualRPM = ratedRPM * rpmRatio;
  const actualFreq = ratedFreq * rpmRatio;
  const powerMargin = ratedPower - actualPower;
  const powerMarginPercent = (powerMargin / ratedPower) * 100;

  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• airflow ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (inputAirflow) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏° airflowUnit
  let unitText;
  switch (airflowUnit) {
    case "cfm": unitText = "CFM"; break;
    case "ls": unitText = "L/s"; break;
    case "m3h":
    default:
      unitText = "m¬≥/h"; break;
  }

  const outputAhu = 
`‚ö° ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á: ${actualPower.toFixed(2)} kW
üîÅ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á: ${actualRPM.toFixed(0)} RPM
üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á: ${actualFreq.toFixed(2)} Hz
üü¢ Power Margin: ${powerMargin.toFixed(2)} kW (${powerMarginPercent.toFixed(1)}%)`;

  const resultAhu = document.getElementById("resultAhu");
  resultAhu.style.display = "block";
  resultAhu.textContent = outputAhu;
});



// ------------------------
// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Dew Point

document.getElementById("calcDewBtn").addEventListener("click", function() {
  const tempInput = document.getElementById("temp").value.trim();
  const tempUnit = document.getElementById("tempUnit").value;
  const rhInput = document.getElementById("rh").value.trim();
  const dewInput = document.getElementById("dewPoint").value.trim();
  const resultDew = document.getElementById("resultDew");

  const T_in = tempInput !== "" ? parseFloat(tempInput) : NaN;
  const RH = rhInput !== "" ? parseFloat(rhInput) : NaN;
  const DewPoint_in = dewInput !== "" ? parseFloat(dewInput) : NaN;

  let filledCount = 0;
  if(!isNaN(T_in)) filledCount++;
  if(!isNaN(RH)) filledCount++;
  if(!isNaN(DewPoint_in)) filledCount++;

  if(filledCount < 2) {
    resultDew.style.display = "block";
    resultDew.textContent = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢";
    return;
  }

  if(!isNaN(RH) && (RH < 0 || RH > 100)) {
    resultDew.style.display = "block";
    resultDew.textContent = "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (RH) ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0 - 100";
    return;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Dew Point (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  function fToC(f) {
    return (f - 32) * 5 / 9;
  }
  function cToF(c) {
    return (c * 9 / 5) + 32;
  }
  function calcDewPoint(T, RH) {
    const a = 17.27;
    const b = 237.7;
    const gamma = Math.log(RH/100) + (a * T) / (b + T);
    return (b * gamma) / (a - gamma);
  }
  function calcRH(T, DewPoint) {
    const a = 17.27;
    const b = 237.7;
    const numerator = Math.exp((a * DewPoint) / (b + DewPoint));
    const denominator = Math.exp((a * T) / (b + T));
    return 100 * (numerator / denominator);
  }
  function calcTemp(DewPoint, RH) {
    const a = 17.27;
    const b = 237.7;
    let T = DewPoint;
    let f, df;
    for(let i=0; i<10; i++) {
      const gammaT = (a * T) / (b + T);
      const gammaD = (a * DewPoint) / (b + DewPoint);
      f = (Math.log(RH/100) + gammaT) - gammaD;
      df = (a * b) / Math.pow(b + T, 2);
      T = T - f / df;
    }
    return T;
  }

  let T = !isNaN(T_in) ? (tempUnit === "F" ? fToC(T_in) : T_in) : NaN;
  let DewPoint = !isNaN(DewPoint_in) ? (tempUnit === "F" ? fToC(DewPoint_in) : DewPoint_in) : NaN;

  let output = "";

  try {
    if (!isNaN(T) && !isNaN(RH) && isNaN(DewPoint)) {
      DewPoint = calcDewPoint(T, RH);
      output += `‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${tempUnit === "F" ? cToF(T).toFixed(2) + " ¬∞F" : T.toFixed(2) + " ¬∞C"}<br>`;
      output += `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå: ${RH.toFixed(2)} %<br>`;
      output += `‡∏à‡∏∏‡∏î Dew Point: ${tempUnit === "F" ? cToF(DewPoint).toFixed(2) + " ¬∞F" : DewPoint.toFixed(2) + " ¬∞C"}`;
    } else if (!isNaN(DewPoint) && !isNaN(RH) && isNaN(T)) {
      T = calcTemp(DewPoint, RH);
      output += `‡∏à‡∏∏‡∏î Dew Point: ${tempUnit === "F" ? cToF(DewPoint).toFixed(2) + " ¬∞F" : DewPoint.toFixed(2) + " ¬∞C"}<br>`;
      output += `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå: ${RH.toFixed(2)} %<br>`;
      output += `‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${tempUnit === "F" ? cToF(T).toFixed(2) + " ¬∞F" : T.toFixed(2) + " ¬∞C"}`;
    } else if (!isNaN(T) && !isNaN(DewPoint) && isNaN(RH)) {
      const rhCalc = calcRH(T, DewPoint);
      output += `‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${tempUnit === "F" ? cToF(T).toFixed(2) + " ¬∞F" : T.toFixed(2) + " ¬∞C"}<br>`;
      output += `‡∏à‡∏∏‡∏î Dew Point: ${tempUnit === "F" ? cToF(DewPoint).toFixed(2) + " ¬∞F" : DewPoint.toFixed(2) + " ¬∞C"}<br>`;
      output += `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå: ${rhCalc.toFixed(2)} %`;
    } else {
      output = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß";
    }
  } catch (err) {
    output = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: " + err.message;
  }

  resultDew.style.display = "block";
  resultDew.innerHTML = output;
});
